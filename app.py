import streamlit as st
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.preprocessing import LabelEncoder


st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç –ø–æ Raman-—Å–ø–µ–∫—Ç—Ä–∞–º", page_icon="üß¨")
st.title("üß™ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç –ø–æ Raman-—Å–ø–µ–∫—Ç—Ä—É")
@st.cache_resource

def load_model():
    return tf.keras.models.load_model("models/raman_cnn_model.h5")

model = load_model()

@st.cache_data
def load_encoder():
    labels = ['Gly', 'Leu', 'Phe', 'Trp']
    le = LabelEncoder()
    le.fit(labels)
    return le
le = load_encoder()
description = {
    "Gly": "–ì–ª–∏—Ü–∏–Ω ‚Äî —Å–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞",
    "Leu": "–õ–µ–π—Ü–∏–Ω ‚Äî –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞ —Å —Ä–∞–∑–≤–µ—Ç–≤–ª—ë–Ω–Ω–æ–π —Ü–µ–ø—å—é",
    "Phe": "–§–µ–Ω–∏–ª–∞–ª–∞–Ω–∏–Ω ‚Äî –∞—Ä–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞",
    "Trp": "–¢—Ä–∏–ø—Ç–æ—Ñ–∞–Ω ‚Äî –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç–∞ —Å –∏–Ω–¥–æ–ª—å–Ω—ã–º –∫–æ–ª—å—Ü–æ–º"
}

st.sidebar.header("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Raman-—Å–ø–µ–∫—Ç—Ä")
uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (.csv –∏–ª–∏ .xlsx)", type=["csv", "xlsx"])
use_example = st.sidebar.button("üìÇ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä")


df = None

def read_uploaded_file(file):
    try:
        if file.name.endswith(".csv"):
            return pd.read_csv(file)
        elif file.name.endswith(".xlsx"):
            return pd.read_excel(file)
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
    return None

def read_example_file(path="example_spectrum.csv"):
    try:
        return pd.read_csv(path)
    except FileNotFoundError:
        st.sidebar.error("‚ùå –§–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ example_spectrum.csv –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–∞: {e}")
    return None

df = None
if use_example:
    df = read_example_file()
    if df is not None:
        st.sidebar.success("‚úÖ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å–ø–µ–∫—Ç—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
elif uploaded_file:
    df = read_uploaded_file(uploaded_file)
    if df is not None:
        st.sidebar.success("‚úÖ –í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

if df is not None:
    st.markdown("### üìà –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df.head())
    try:
        spectrum = df.values.flatten().astype("float32")
        spectrum = spectrum / np.max(spectrum)
        spectrum = np.expand_dims(spectrum, axis=(0, -1))  # (1, –¥–ª–∏–Ω–∞, 1)

        prediction = model.predict(spectrum)
        pred_class = np.argmax(prediction, axis=1)[0]
        pred_label = le.inverse_transform([pred_class])[0]
        confidence = np.max(prediction) * 100

        st.success(f"üß¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: **{pred_label}**")
        st.metric("üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{confidence:.2f}%")
        st.info(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description[pred_label]}")

        st.markdown("### üî¨ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –ø–æ –∫–ª–∞—Å—Å–∞–º")
        prob_df = pd.DataFrame(prediction, columns=le.classes_).T.rename(columns={0: "Probability"})
        st.bar_chart(prob_df)

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

else:
    st.info("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–µ–∫—Ç—Ä–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–º–µ—Ä.")

st.markdown("""
<hr style="margin-top: 50px; border-top: 1px solid #444;" />
<div style='text-align: center; color: gray; font-size: small;'>
    üß¨ DS Capstone Project 2025 | –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–º–∏–Ω–æ–∫–∏—Å–ª–æ—Ç –ø–æ Raman-—Å–ø–µ–∫—Ç—Ä–∞–º |
</div>
""", unsafe_allow_html=True)
